{"ast":null,"code":"var _jsxFileName = \"/Users/joey/watch-it/client/src/components/body.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./body.css\";\nimport MovieCard from \"./movieCard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Body = () => {\n  _s();\n  const [movies, setMovies] = useState([]); // State for movies\n  const [tvShows, setTvShows] = useState([]); // State for TV shows\n\n  const fetchTrendingMovies = async () => {\n    const url = \"https://api.themoviedb.org/3/discover/movie?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3MDRiOGY5NGIzZTBmMWEyMzk3MGEyNWMyMDAyZjI0YyIsIm5iZiI6MTczMTgyMDk5OC41MzYzNTM2LCJzdWIiOiI2NzM4OWRlNjljMTZkYWZhMDZmOWExMmEiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.tAz9nR91UBqwEeqKwmRNn24oyjlkHyGQKxaYPTFuifE\"\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n      setMovies(data.results); // Storing that data in the state\n\n      // Fetch logos for each movie\n      data.results.forEach(movie => {\n        fetchMovieLogo(movie.id);\n      });\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const fetchMovieLogo = async id => {\n    const url = `https://api.themoviedb.org/3/movie/${id}/images`;\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH}`\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n\n      // Extract the logo URL\n      const logo = data.logos && data.logos.length > 0 ? data.logos[0].file_path : null;\n\n      // Update the state with the logo URL\n      setMovieLogos(prevLogos => ({\n        ...prevLogos,\n        [id]: logo\n      }));\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const fetchTrendingTV = async () => {\n    const url = \"https://api.themoviedb.org/3/discover/tv?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH}`\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n      setTvShows(data.results); // Storing that data in the state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTrendingMovies(); // Calling the fetchTrendingMovies function only during the initial rendering of the app.\n    fetchTrendingTV(); // Calling the fetchTrendingTV function only during the initial rendering of the app.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid d-flex align-items-center justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row w-100\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 d-flex align-items-center justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center text-light\",\n            children: \"Popular Movies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid bg-black\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: movies.map(item => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: item\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid d-flex align-items-center justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row w-100\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 d-flex align-items-center justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center text-light\",\n            children: \"Popular TV Shows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: tvShows.map(item => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: item\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Body, \"cWfkmSu5qw4+SkXFrzBAarSZ2cw=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","useState","useEffect","MovieCard","jsxDEV","_jsxDEV","Fragment","_Fragment","Body","_s","movies","setMovies","tvShows","setTvShows","fetchTrendingMovies","url","options","method","headers","accept","Authorization","response","fetch","ok","Error","status","data","json","console","log","results","forEach","movie","fetchMovieLogo","id","error","process","env","TMDB_API_AUTH","logo","logos","length","file_path","setMovieLogos","prevLogos","fetchTrendingTV","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["/Users/joey/watch-it/client/src/components/body.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./body.css\";\nimport MovieCard from \"./movieCard\";\n\nconst Body = () => {\n  const [movies, setMovies] = useState([]); // State for movies\n  const [tvShows, setTvShows] = useState([]); // State for TV shows\n\n  const fetchTrendingMovies = async () => {\n    const url =\n      \"https://api.themoviedb.org/3/discover/movie?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization:\n          \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3MDRiOGY5NGIzZTBmMWEyMzk3MGEyNWMyMDAyZjI0YyIsIm5iZiI6MTczMTgyMDk5OC41MzYzNTM2LCJzdWIiOiI2NzM4OWRlNjljMTZkYWZhMDZmOWExMmEiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.tAz9nR91UBqwEeqKwmRNn24oyjlkHyGQKxaYPTFuifE\",\n      },\n    };\n\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n      setMovies(data.results); // Storing that data in the state\n\n      // Fetch logos for each movie\n      data.results.forEach((movie) => {\n        fetchMovieLogo(movie.id);\n      });\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const fetchMovieLogo = async (id) => {\n    const url = `https://api.themoviedb.org/3/movie/${id}/images`;\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH}`,\n      },\n    };\n\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n\n      // Extract the logo URL\n      const logo =\n        data.logos && data.logos.length > 0 ? data.logos[0].file_path : null;\n\n      // Update the state with the logo URL\n      setMovieLogos((prevLogos) => ({\n        ...prevLogos,\n        [id]: logo,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const fetchTrendingTV = async () => {\n    const url =\n      \"https://api.themoviedb.org/3/discover/tv?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH}`,\n      },\n    };\n\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n      setTvShows(data.results); // Storing that data in the state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTrendingMovies(); // Calling the fetchTrendingMovies function only during the initial rendering of the app.\n    fetchTrendingTV(); // Calling the fetchTrendingTV function only during the initial rendering of the app.\n  }, []);\n\n  return (\n    <>\n      <div className=\"container-fluid d-flex align-items-center justify-content-center\">\n        <div className=\"row w-100\">\n          <div className=\"col-12 d-flex align-items-center justify-content-center\">\n            <h1 className=\"text-center text-light\">Popular Movies</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"container-fluid bg-black\">\n        <div className=\"row\">\n          {movies.map((item) => (\n            <MovieCard key={item.id} movie={item} />\n          ))}\n        </div>\n      </div>\n      <div className=\"container-fluid d-flex align-items-center justify-content-center\">\n        <div className=\"row w-100\">\n          <div className=\"col-12 d-flex align-items-center justify-content-center\">\n            <h1 className=\"text-center text-light\">Popular TV Shows</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          {tvShows.map((item) => (\n            <MovieCard key={item.id} movie={item} />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Body;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AACnB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C,MAAMa,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,MAAMC,GAAG,GACP,mIAAmI;IACrI,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EACX;MACJ;IACF,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;MACnBf,SAAS,CAACe,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC;;MAEzB;MACAJ,IAAI,CAACI,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QAC9BC,cAAc,CAACD,KAAK,CAACE,EAAE,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMF,cAAc,GAAG,MAAOC,EAAE,IAAK;IACnC,MAAMnB,GAAG,GAAG,sCAAsCmB,EAAE,SAAS;IAC7D,MAAMlB,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,UAAUgB,OAAO,CAACC,GAAG,CAACC,aAAa;MACpD;IACF,CAAC;IAED,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;;MAEnB;MACA,MAAMa,IAAI,GACRb,IAAI,CAACc,KAAK,IAAId,IAAI,CAACc,KAAK,CAACC,MAAM,GAAG,CAAC,GAAGf,IAAI,CAACc,KAAK,CAAC,CAAC,CAAC,CAACE,SAAS,GAAG,IAAI;;MAEtE;MACAC,aAAa,CAAEC,SAAS,KAAM;QAC5B,GAAGA,SAAS;QACZ,CAACV,EAAE,GAAGK;MACR,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAM9B,GAAG,GACP,gIAAgI;IAClI,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,UAAUgB,OAAO,CAACC,GAAG,CAACC,aAAa;MACpD;IACF,CAAC;IAED,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;MACnBb,UAAU,CAACa,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAEDjC,SAAS,CAAC,MAAM;IACdY,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACvB+B,eAAe,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACExC,OAAA,CAAAE,SAAA;IAAAuC,QAAA,gBACEzC,OAAA;MAAK0C,SAAS,EAAC,kEAAkE;MAAAD,QAAA,eAC/EzC,OAAA;QAAK0C,SAAS,EAAC,WAAW;QAAAD,QAAA,eACxBzC,OAAA;UAAK0C,SAAS,EAAC,yDAAyD;UAAAD,QAAA,eACtEzC,OAAA;YAAI0C,SAAS,EAAC,wBAAwB;YAAAD,QAAA,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN9C,OAAA;MAAK0C,SAAS,EAAC,0BAA0B;MAAAD,QAAA,eACvCzC,OAAA;QAAK0C,SAAS,EAAC,KAAK;QAAAD,QAAA,EACjBpC,MAAM,CAAC0C,GAAG,CAAEC,IAAI,iBACfhD,OAAA,CAACF,SAAS;UAAe6B,KAAK,EAAEqB;QAAK,GAArBA,IAAI,CAACnB,EAAE;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN9C,OAAA;MAAK0C,SAAS,EAAC,kEAAkE;MAAAD,QAAA,eAC/EzC,OAAA;QAAK0C,SAAS,EAAC,WAAW;QAAAD,QAAA,eACxBzC,OAAA;UAAK0C,SAAS,EAAC,yDAAyD;UAAAD,QAAA,eACtEzC,OAAA;YAAI0C,SAAS,EAAC,wBAAwB;YAAAD,QAAA,EAAC;UAAgB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN9C,OAAA;MAAK0C,SAAS,EAAC,iBAAiB;MAAAD,QAAA,eAC9BzC,OAAA;QAAK0C,SAAS,EAAC,KAAK;QAAAD,QAAA,EACjBlC,OAAO,CAACwC,GAAG,CAAEC,IAAI,iBAChBhD,OAAA,CAACF,SAAS;UAAe6B,KAAK,EAAEqB;QAAK,GAArBA,IAAI,CAACnB,EAAE;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAAC1C,EAAA,CAxIID,IAAI;AAAA8C,EAAA,GAAJ9C,IAAI;AA0IV,eAAeA,IAAI;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}