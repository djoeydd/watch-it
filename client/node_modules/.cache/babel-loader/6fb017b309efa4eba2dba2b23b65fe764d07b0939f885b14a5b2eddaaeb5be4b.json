{"ast":null,"code":"const API_BASE_URL = \"http://localhost:5001/api/tmdb\";\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/movies`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching trending movies:\", error);\n    throw error;\n  }\n};\nexport const fetchTrendingTV = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/tv`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching trending TV shows:\", error);\n    throw error;\n  }\n};\nexport const fetchMovieLogos = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/images`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching movie logos:\", error);\n    throw error;\n  }\n};\nexport const fetchMovieVideos = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/videos`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    const trailers = data.results.filter(video => video.type === \"Trailer\");\n\n    // Check if teasers array is not empty before accessing the key property\n    const videoKey = trailers.length > 0 ? trailers[0].key : null;\n    return videoKey;\n  } catch (error) {\n    console.error(\"Error fetching movie videos:\", error);\n    throw error;\n  }\n};\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching movie details:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchTrendingMovies","response","fetch","ok","Error","data","json","error","console","fetchTrendingTV","fetchMovieLogos","id","fetchMovieVideos","trailers","results","filter","video","type","videoKey","length","key","fetchMovieDetails"],"sources":["/Users/joey/watch-it/client/src/services/tmdbService.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:5001/api/tmdb\";\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/movies`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching trending movies:\", error);\n    throw error;\n  }\n};\n\nexport const fetchTrendingTV = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/tv`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching trending TV shows:\", error);\n    throw error;\n  }\n};\n\nexport const fetchMovieLogos = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/images`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching movie logos:\", error);\n    throw error;\n  }\n};\n\nexport const fetchMovieVideos = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/videos`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    const trailers = data.results.filter((video) => video.type === \"Trailer\");\n\n    // Check if teasers array is not empty before accessing the key property\n    const videoKey = trailers.length > 0 ? trailers[0].key : null;\n    return videoKey;\n  } catch (error) {\n    console.error(\"Error fetching movie videos:\", error);\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching movie details:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}