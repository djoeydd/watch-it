{"ast":null,"code":"const API_BASE_URL = \"http://localhost:5001/api/tmdb\";\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/movies`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const moviesWithLogos = await Promise.all(data.results.map(async movie => {\n      const logo = await fetchMovieLogos(movie.id);\n      return {\n        ...movie,\n        logo\n      };\n    }));\n    return {\n      ...data,\n      results: moviesWithLogos\n    };\n  } catch (error) {\n    console.error(\"Error fetching trending movies:\", error);\n    throw error;\n  }\n};\nexport const fetchTrendingTV = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/tv`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching trending TV shows:\", error);\n    throw error;\n  }\n};\nexport const fetchMovieLogos = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/logos`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    const logo = data.logos && data.logos.length > 0 ? data.logos[0].file_path : null;\n    return logo;\n  } catch (error) {\n    console.error(\"Error fetching movie logos:\", error);\n    throw error;\n  }\n};\nexport const fetchMovieVideos = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/videos`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    const trailers = data.results.filter(video => video.type === \"Trailer\");\n\n    // Check if teasers array is not empty before accessing the key property\n    const videoKey = trailers.length > 0 ? trailers[0].key : null;\n    return videoKey;\n  } catch (error) {\n    console.error(\"Error fetching movie videos:\", error);\n    throw error;\n  }\n};\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching movie details:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchTrendingMovies","response","fetch","ok","Error","moviesWithLogos","Promise","all","data","results","map","movie","logo","fetchMovieLogos","id","error","console","fetchTrendingTV","json","logos","length","file_path","fetchMovieVideos","trailers","filter","video","type","videoKey","key","fetchMovieDetails"],"sources":["/Users/joey/watch-it/client/src/services/tmdbService.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:5001/api/tmdb\";\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/movies`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const moviesWithLogos = await Promise.all(\n      data.results.map(async (movie) => {\n        const logo = await fetchMovieLogos(movie.id);\n        return { ...movie, logo };\n      })\n    );\n\n    return { ...data, results: moviesWithLogos };\n  } catch (error) {\n    console.error(\"Error fetching trending movies:\", error);\n    throw error;\n  }\n};\n\nexport const fetchTrendingTV = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/tv`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching trending TV shows:\", error);\n    throw error;\n  }\n};\n\nexport const fetchMovieLogos = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/logos`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    const logo =\n      data.logos && data.logos.length > 0 ? data.logos[0].file_path : null;\n    return logo;\n  } catch (error) {\n    console.error(\"Error fetching movie logos:\", error);\n    throw error;\n  }\n};\n\nexport const fetchMovieVideos = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}/videos`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    const trailers = data.results.filter((video) => video.type === \"Trailer\");\n\n    // Check if teasers array is not empty before accessing the key property\n    const videoKey = trailers.length > 0 ? trailers[0].key : null;\n    return videoKey;\n  } catch (error) {\n    console.error(\"Error fetching movie videos:\", error);\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching movie details:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,gCAAgC;AAErD,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,kBAAkB,CAAC;IAC/D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,eAAe,GAAG,MAAMC,OAAO,CAACC,GAAG,CACvCC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,KAAK,IAAK;MAChC,MAAMC,IAAI,GAAG,MAAMC,eAAe,CAACF,KAAK,CAACG,EAAE,CAAC;MAC5C,OAAO;QAAE,GAAGH,KAAK;QAAEC;MAAK,CAAC;IAC3B,CAAC,CACH,CAAC;IAED,OAAO;MAAE,GAAGJ,IAAI;MAAEC,OAAO,EAAEJ;IAAgB,CAAC;EAC9C,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,cAAc,CAAC;IAC3D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMI,IAAI,GAAG,MAAMP,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAClC,OAAOV,IAAI;EACb,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMF,eAAe,GAAG,MAAOC,EAAE,IAAK;EAC3C,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,UAAUe,EAAE,QAAQ,CAAC;IACjE,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMI,IAAI,GAAG,MAAMP,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAClC,MAAMN,IAAI,GACRJ,IAAI,CAACW,KAAK,IAAIX,IAAI,CAACW,KAAK,CAACC,MAAM,GAAG,CAAC,GAAGZ,IAAI,CAACW,KAAK,CAAC,CAAC,CAAC,CAACE,SAAS,GAAG,IAAI;IACtE,OAAOT,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAOR,EAAE,IAAK;EAC5C,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,UAAUe,EAAE,SAAS,CAAC;IAClE,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMI,IAAI,GAAG,MAAMP,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAClC,MAAMK,QAAQ,GAAGf,IAAI,CAACC,OAAO,CAACe,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,KAAK,SAAS,CAAC;;IAEzE;IACA,MAAMC,QAAQ,GAAGJ,QAAQ,CAACH,MAAM,GAAG,CAAC,GAAGG,QAAQ,CAAC,CAAC,CAAC,CAACK,GAAG,GAAG,IAAI;IAC7D,OAAOD,QAAQ;EACjB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMc,iBAAiB,GAAG,MAAOf,EAAE,IAAK;EAC7C,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,UAAUe,EAAE,EAAE,CAAC;IAC3D,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMI,IAAI,GAAG,MAAMP,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAClC,OAAOV,IAAI;EACb,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}