{"ast":null,"code":"var _jsxFileName = \"/Users/joey/watch-it/client/src/components/body.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport \"./body.css\";\nimport MovieCard from \"./movieCard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Body = () => {\n  _s();\n  const [movies, setMovies] = useState([]); // State for movies\n  const [tvShows, setTvShows] = useState([]); // State for TV shows\n\n  const fetchTrendingMovies = useCallback(async () => {\n    const url = \"https://api.themoviedb.org/3/discover/movie?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH_}`\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n\n      // Fetch logos for each movie and update the movie object\n      const moviesWithLogos = await Promise.all(data.results.map(async movie => {\n        const logo = await fetchMovieLogo(movie.id);\n        return {\n          ...movie,\n          logo\n        };\n      }));\n      setMovies(moviesWithLogos); // Storing that data in the state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  }, []); // Empty dependency array ensures the function is memoized\n\n  const fetchMovieLogo = async id => {\n    const url = `https://api.themoviedb.org/3/movie/${id}/images`;\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH_}`\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n\n      // Extract the logo URL\n      const logo = data.logos && data.logos.length > 0 ? data.logos[0].file_path : null;\n      return logo;\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return null;\n    }\n  };\n  const fetchTrendingTV = useCallback(async () => {\n    const url = \"https://api.themoviedb.org/3/discover/tv?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.REACT_APP_TMDB_API_KEY}`\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n      setTvShows(data.results); // Storing that data in the state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  }, []); // Empty dependency array ensures the function is memoized\n\n  useEffect(() => {\n    fetchTrendingMovies(); // Calling the fetchTrendingMovies function only during the initial rendering of the app.\n    fetchTrendingTV(); // Calling the fetchTrendingTV function only during the initial rendering of the app.\n  }, [fetchTrendingMovies, fetchTrendingTV]); // Added fetchTrendingMovies and fetchTrendingTV to the dependency array\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-0 flex items-center justify-center bg-black py-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center text-light text-4xl tracking-widest\",\n            children: \"Popular Movies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" \",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid gap-8 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 p-4 md:p-2 xl:p-5\",\n        children: movies.map(item => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: item\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-0 flex flex-wrap items-center justify-center py-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center text-light text-4xl tracking-widest\",\n            children: \"Popular TV Shows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-0 bg-black py-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap\",\n        children: tvShows.map(item => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: item\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Body, \"rVrUqq/l1KGTtYONaKOa+QMXT+E=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MovieCard","jsxDEV","_jsxDEV","Fragment","_Fragment","Body","_s","movies","setMovies","tvShows","setTvShows","fetchTrendingMovies","url","options","method","headers","accept","Authorization","process","env","TMDB_API_AUTH_","response","fetch","ok","Error","status","data","json","console","log","moviesWithLogos","Promise","all","results","map","movie","logo","fetchMovieLogo","id","error","logos","length","file_path","fetchTrendingTV","REACT_APP_TMDB_API_KEY","children","className","fileName","_jsxFileName","lineNumber","columnNumber","item","_c","$RefreshReg$"],"sources":["/Users/joey/watch-it/client/src/components/body.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./body.css\";\nimport MovieCard from \"./movieCard\";\n\nconst Body = () => {\n  const [movies, setMovies] = useState([]); // State for movies\n  const [tvShows, setTvShows] = useState([]); // State for TV shows\n\n  const fetchTrendingMovies = useCallback(async () => {\n    const url =\n      \"https://api.themoviedb.org/3/discover/movie?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH_}`,\n      },\n    };\n\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n\n      // Fetch logos for each movie and update the movie object\n      const moviesWithLogos = await Promise.all(\n        data.results.map(async (movie) => {\n          const logo = await fetchMovieLogo(movie.id);\n          return { ...movie, logo };\n        })\n      );\n\n      setMovies(moviesWithLogos); // Storing that data in the state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  }, []); // Empty dependency array ensures the function is memoized\n\n  const fetchMovieLogo = async (id) => {\n    const url = `https://api.themoviedb.org/3/movie/${id}/images`;\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.TMDB_API_AUTH_}`,\n      },\n    };\n\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n\n      // Extract the logo URL\n      const logo =\n        data.logos && data.logos.length > 0 ? data.logos[0].file_path : null;\n      return logo;\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return null;\n    }\n  };\n\n  const fetchTrendingTV = useCallback(async () => {\n    const url =\n      \"https://api.themoviedb.org/3/discover/tv?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${process.env.REACT_APP_TMDB_API_KEY}`,\n      },\n    };\n\n    try {\n      const response = await fetch(url, options);\n\n      // Check if the response status is OK\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Fetching data from API in JSON Format\n      console.log(data); // Log the data to see what is being returned\n      setTvShows(data.results); // Storing that data in the state\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  }, []); // Empty dependency array ensures the function is memoized\n\n  useEffect(() => {\n    fetchTrendingMovies(); // Calling the fetchTrendingMovies function only during the initial rendering of the app.\n    fetchTrendingTV(); // Calling the fetchTrendingTV function only during the initial rendering of the app.\n  }, [fetchTrendingMovies, fetchTrendingTV]); // Added fetchTrendingMovies and fetchTrendingTV to the dependency array\n\n  return (\n    <>\n      <div className=\"container mx-0 flex items-center justify-center bg-black py-8\">\n        <div className=\"w-full\">\n          <div className=\"flex items-center justify-center\">\n            <h1 className=\"text-center text-light text-4xl tracking-widest\">\n              Popular Movies\n            </h1>\n          </div>\n        </div>\n      </div>\n      <div className=\" \">\n        <div className=\"grid gap-8 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 p-4 md:p-2 xl:p-5\">\n          {movies.map((item) => (\n            <MovieCard key={item.id} movie={item} />\n          ))}\n        </div>\n      </div>\n      <div className=\"container mx-0 flex flex-wrap items-center justify-center py-8\">\n        <div className=\"w-full\">\n          <div className=\"flex items-center justify-center\">\n            <h1 className=\"text-center text-light text-4xl tracking-widest\">\n              Popular TV Shows\n            </h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"container mx-0 bg-black py-8\">\n        <div className=\"flex flex-wrap\">\n          {tvShows.map((item) => (\n            <MovieCard key={item.id} movie={item} />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Body;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAO,YAAY;AACnB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C,MAAMc,mBAAmB,GAAGZ,WAAW,CAAC,YAAY;IAClD,MAAMa,GAAG,GACP,mIAAmI;IACrI,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,cAAc;MACrD;IACF,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;;MAEnB;MACA,MAAMI,eAAe,GAAG,MAAMC,OAAO,CAACC,GAAG,CACvCN,IAAI,CAACO,OAAO,CAACC,GAAG,CAAC,MAAOC,KAAK,IAAK;QAChC,MAAMC,IAAI,GAAG,MAAMC,cAAc,CAACF,KAAK,CAACG,EAAE,CAAC;QAC3C,OAAO;UAAE,GAAGH,KAAK;UAAEC;QAAK,CAAC;MAC3B,CAAC,CACH,CAAC;MAED5B,SAAS,CAACsB,eAAe,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMF,cAAc,GAAG,MAAOC,EAAE,IAAK;IACnC,MAAM1B,GAAG,GAAG,sCAAsC0B,EAAE,SAAS;IAC7D,MAAMzB,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,cAAc;MACrD;IACF,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;;MAEnB;MACA,MAAMU,IAAI,GACRV,IAAI,CAACc,KAAK,IAAId,IAAI,CAACc,KAAK,CAACC,MAAM,GAAG,CAAC,GAAGf,IAAI,CAACc,KAAK,CAAC,CAAC,CAAC,CAACE,SAAS,GAAG,IAAI;MACtE,OAAON,IAAI;IACb,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAMI,eAAe,GAAG5C,WAAW,CAAC,YAAY;IAC9C,MAAMa,GAAG,GACP,gIAAgI;IAClI,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACyB,sBAAsB;MAC7D;IACF,CAAC;IAED,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;MACnBhB,UAAU,CAACgB,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERzC,SAAS,CAAC,MAAM;IACda,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACvBgC,eAAe,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,CAAChC,mBAAmB,EAAEgC,eAAe,CAAC,CAAC,CAAC,CAAC;;EAE5C,oBACEzC,OAAA,CAAAE,SAAA;IAAAyC,QAAA,gBACE3C,OAAA;MAAK4C,SAAS,EAAC,+DAA+D;MAAAD,QAAA,eAC5E3C,OAAA;QAAK4C,SAAS,EAAC,QAAQ;QAAAD,QAAA,eACrB3C,OAAA;UAAK4C,SAAS,EAAC,kCAAkC;UAAAD,QAAA,eAC/C3C,OAAA;YAAI4C,SAAS,EAAC,iDAAiD;YAAAD,QAAA,EAAC;UAEhE;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNhD,OAAA;MAAK4C,SAAS,EAAC,GAAG;MAAAD,QAAA,eAChB3C,OAAA;QAAK4C,SAAS,EAAC,uFAAuF;QAAAD,QAAA,EACnGtC,MAAM,CAAC2B,GAAG,CAAEiB,IAAI,iBACfjD,OAAA,CAACF,SAAS;UAAemC,KAAK,EAAEgB;QAAK,GAArBA,IAAI,CAACb,EAAE;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNhD,OAAA;MAAK4C,SAAS,EAAC,gEAAgE;MAAAD,QAAA,eAC7E3C,OAAA;QAAK4C,SAAS,EAAC,QAAQ;QAAAD,QAAA,eACrB3C,OAAA;UAAK4C,SAAS,EAAC,kCAAkC;UAAAD,QAAA,eAC/C3C,OAAA;YAAI4C,SAAS,EAAC,iDAAiD;YAAAD,QAAA,EAAC;UAEhE;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNhD,OAAA;MAAK4C,SAAS,EAAC,8BAA8B;MAAAD,QAAA,eAC3C3C,OAAA;QAAK4C,SAAS,EAAC,gBAAgB;QAAAD,QAAA,EAC5BpC,OAAO,CAACyB,GAAG,CAAEiB,IAAI,iBAChBjD,OAAA,CAACF,SAAS;UAAemC,KAAK,EAAEgB;QAAK,GAArBA,IAAI,CAACb,EAAE;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAAC5C,EAAA,CA1IID,IAAI;AAAA+C,EAAA,GAAJ/C,IAAI;AA4IV,eAAeA,IAAI;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}